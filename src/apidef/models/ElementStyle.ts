/**
 * Structurizr
 * The web API for Structurizr.
 *
 * OpenAPI spec version: 1.26.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
* A definition of an element style.
*/
export class ElementStyle {
    /**
    * The tag to which this element style applies.
    */
    'tag'?: string;
    /**
    * The width of the element, in pixels.
    */
    'width'?: number;
    /**
    * The height of the element, in pixels.
    */
    'height'?: number;
    /**
    * The background colour of the element, as a HTML RGB hex string (e.g. \'#ffffff\').
    */
    'background'?: string;
    /**
    * The stroke colour of the element, as a HTML RGB hex string (e.g. \'#000000\').
    */
    'stroke'?: string;
    /**
    * The width of the stroke, in pixels.
    */
    'strokeWidth'?: number;
    /**
    * The foreground (text) colour of the element, as a HTML RGB hex string (e.g. \'#ffffff\').
    */
    'color'?: string;
    /**
    * The standard font size used to render text, in pixels.
    */
    'fontSize'?: number;
    /**
    * The shape used to render the element.
    */
    'shape'?: ElementStyleShapeEnum;
    /**
    * A Base64 data URI representation of a PNG/JPG/GIF file.
    */
    'icon'?: string;
    /**
    * The type of border used to render the element.
    */
    'border'?: ElementStyleBorderEnum;
    /**
    * The opacity used when rendering the element; 0-100.
    */
    'opacity'?: number;
    /**
    * Whether the element metadata should be shown or not.
    */
    'metadata'?: boolean;
    /**
    * Whether the element description should be shown or not.
    */
    'description'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string",
            "format": ""
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number",
            "format": "integer"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "number",
            "format": "integer"
        },
        {
            "name": "background",
            "baseName": "background",
            "type": "string",
            "format": ""
        },
        {
            "name": "stroke",
            "baseName": "stroke",
            "type": "string",
            "format": ""
        },
        {
            "name": "strokeWidth",
            "baseName": "strokeWidth",
            "type": "number",
            "format": "integer"
        },
        {
            "name": "color",
            "baseName": "color",
            "type": "string",
            "format": ""
        },
        {
            "name": "fontSize",
            "baseName": "fontSize",
            "type": "number",
            "format": "integer"
        },
        {
            "name": "shape",
            "baseName": "shape",
            "type": "ElementStyleShapeEnum",
            "format": ""
        },
        {
            "name": "icon",
            "baseName": "icon",
            "type": "string",
            "format": ""
        },
        {
            "name": "border",
            "baseName": "border",
            "type": "ElementStyleBorderEnum",
            "format": ""
        },
        {
            "name": "opacity",
            "baseName": "opacity",
            "type": "number",
            "format": "integer"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ElementStyle.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum ElementStyleShapeEnum {
    Box = 'Box',
    RoundedBox = 'RoundedBox',
    Component = 'Component',
    Circle = 'Circle',
    Ellipse = 'Ellipse',
    Hexagon = 'Hexagon',
    Diamond = 'Diamond',
    Folder = 'Folder',
    Cylinder = 'Cylinder',
    Pipe = 'Pipe',
    WebBrowser = 'WebBrowser',
    Window = 'Window',
    MobileDevicePortrait = 'MobileDevicePortrait',
    MobileDeviceLandscape = 'MobileDeviceLandscape',
    Person = 'Person',
    Robot = 'Robot'
}
export enum ElementStyleBorderEnum {
    Solid = 'Solid',
    Dashed = 'Dashed',
    Dotted = 'Dotted'
}

