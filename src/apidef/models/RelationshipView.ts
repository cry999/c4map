/**
 * Structurizr
 * The web API for Structurizr.
 *
 * OpenAPI spec version: 1.26.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Vertex } from '../models/Vertex';

/**
* An instance of a model relationship in a View.
*/
export class RelationshipView {
    /**
    * The ID of the relationship.
    */
    'id'?: string;
    /**
    * The description of this relationship (used in dynamic views only).
    */
    'description'?: string;
    /**
    * Signifies whether this relationship represents a return/response message (used in dynamic views only).
    */
    'response'?: boolean;
    /**
    * Gets the order of this relationship (used in dynamic views only; e.g. 1.0, 1.1, 2.0, etc).
    */
    'order'?: string;
    /**
    * The set of vertices used to render the relationship.
    */
    'vertices'?: Array<Vertex>;
    /**
    * The routing algorithm used when rendering this individual relationship.
    */
    'routing'?: RelationshipViewRoutingEnum;
    /**
    * The position of the annotation along the line; 0 (start) to 100 (end).
    */
    'position'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "string",
            "format": ""
        },
        {
            "name": "vertices",
            "baseName": "vertices",
            "type": "Array<Vertex>",
            "format": ""
        },
        {
            "name": "routing",
            "baseName": "routing",
            "type": "RelationshipViewRoutingEnum",
            "format": ""
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number",
            "format": "integer"
        }    ];

    static getAttributeTypeMap() {
        return RelationshipView.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum RelationshipViewRoutingEnum {
    Direct = 'Direct',
    Curved = 'Curved',
    Orthogonal = 'Orthogonal'
}

